// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  password  String
  forms     Form[]  // Add this line to create the opposite relation field
  pallettes Pallette[]
}

model Form {
  id                 Int       @id @default(autoincrement())
  name               String
  lastname           String
  CI                 String    @unique // Cédula de Identidad (única)
  phone              String
  email              String
  profileDescription String
  profesion          String
  website            String
  country            String
  city               String
  state              String
  laboralExperiences Json      // Experiencias laborales (arreglo)
  languages          Json      // Idiomas (arreglo)
  academyFormations  Json      // Formaciones académicas (arreglo)
  skills             Json      // Habilidades técnicas (arreglo)
  softSkills         Json      // Habilidades blandas (arreglo)
  userId             Int       // Clave foránea para la relación con User
  user               User      @relation(fields: [userId], references: [id]) // Relación con User
}

model Pallette {
  id        Int      @id @default(autoincrement())
  name      String
  colors    Json     // Para almacenar un array de colores
  sizes     Json
  typo1     String   // Nombre o identificador de la primera tipografía
  typo2     String   // Nombre o identificador de la segunda tipografía
  typo1File String?  // Ruta o URL al archivo de la primera tipografía (opcional)
  typo2File String?  // Ruta o URL al archivo de la segunda tipografía (opcional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int   
  user      User     @relation(fields: [userId], references: [id])
}